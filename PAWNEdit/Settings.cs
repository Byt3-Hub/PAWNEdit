using System;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using System.Xml;

namespace PAWNEdit
{
    public class Settings
    {
        public class Set_t
        {
            public Font font = new Font("Courier New", 10.0f);
            public Color forecolor;
            public Color backcolor;
        };

        public class Settings_t
        {
            // Scintilla
            // Text
            public Set_t defaulttext = new Set_t();
            public Set_t linecomment = new Set_t();
            public Set_t streamcomment = new Set_t();
            public Set_t doccomment = new Set_t();
            public Set_t number = new Set_t();
            public Set_t keyword = new Set_t();
            public Set_t str = new Set_t();
            public Set_t character = new Set_t();
            public Set_t preprocessor = new Set_t();
            public Set_t operat = new Set_t();
            public Set_t identifier = new Set_t();
            public Set_t stringeol = new Set_t();
            public Set_t verbatim = new Set_t();
            public Set_t regex = new Set_t();
            public Set_t doclinecomment = new Set_t();
            public Set_t keyword2 = new Set_t();
        };

        public Settings_t settings = new Settings_t();

        private Form1 mainform;
        private Tabs tabs;
        private Build build;

        public Settings(Form1 form)
        {
            try
            {
                this.mainform = form;
            }
            catch (Exception ex) { mainform.CaughtException(ex); }
        }

        public void Update()
        {
            this.build = mainform.build;
            this.tabs = mainform.tabs;
        }

        public void WriteSettings()
        {
            try
            {
                FontConverter fontconvert = new FontConverter();
                ColorConverter colorconvert = new ColorConverter();

                XmlWriterSettings sett = new XmlWriterSettings();
                sett.Indent = true;

                XmlWriter xml = XmlWriter.Create("settings.xml", sett);
                xml.WriteStartDocument();
                xml.WriteComment("This settings file was generated by PAWNEdit.");

                // scintilla
                xml.WriteStartElement("scintilla");
                // Text
                xml.WriteStartElement("highlighting");

                // Default
                xml.WriteStartElement("default");
                xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.defaulttext.font));
                xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.defaulttext.forecolor));
                xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.defaulttext.backcolor));
                xml.WriteEndElement();

                // Line Comment
                xml.WriteStartElement("linecomment");
                xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.linecomment.font));
                xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.linecomment.forecolor));
                xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.linecomment.backcolor));
                xml.WriteEndElement();

                // Stream Comment
                xml.WriteStartElement("streamcomment");
                xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.streamcomment.font));
                xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.streamcomment.forecolor));
                xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.streamcomment.backcolor));
                xml.WriteEndElement();

                // Number
                xml.WriteStartElement("number");
                xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.number.font));
                xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.number.forecolor));
                xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.number.backcolor));
                xml.WriteEndElement();

                xml.WriteEndElement();

                // ================
                xml.WriteEndElement();
                xml.WriteEndDocument();
                // End of scintilla

                xml.Flush();
                xml.Close();
            }
            catch (Exception ex) { mainform.CaughtException(ex); }
        }

        public void ReadSettings()
        {
            try
            {
                FontConverter fontconvert = new FontConverter();
                ColorConverter colorconvert = new ColorConverter();

                XmlReader xml = XmlReader.Create("settings.xml");
                while (xml.Read())
                {
                    if (xml.NodeType == XmlNodeType.Element && xml.Name.CompareTo("scintilla") == 0)
                    {
                        while (xml.NodeType != XmlNodeType.EndElement)
                        {
                            xml.Read();
                            if (xml.Name.CompareTo("highlighting") == 0)
                            {
                                while (xml.NodeType != XmlNodeType.EndElement)
                                {
                                    xml.Read();
                                    if (xml.Name.CompareTo("default") == 0)
                                    {
                                        settings.defaulttext.font = (Font)fontconvert.ConvertFromString(xml.GetAttribute("font"));
                                        settings.defaulttext.forecolor = (Color)colorconvert.ConvertFromString(xml.GetAttribute("forecolor"));
                                        settings.defaulttext.backcolor = (Color)colorconvert.ConvertFromString(xml.GetAttribute("backcolor"));
                                    }
                                }
                            }
                        }
                    }
                }

                /*    // Default
                    xml.WriteStartElement("default");
                    xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.defaulttext.font));
                    xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.defaulttext.forecolor));
                    xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.defaulttext.backcolor));
                    xml.WriteEndElement();

                    // Line Comment
                    xml.WriteStartElement("linecomment");
                    xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.linecomment.font));
                    xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.linecomment.forecolor));
                    xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.linecomment.backcolor));
                    xml.WriteEndElement();

                    // Stream Comment
                    xml.WriteStartElement("streamcomment");
                    xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.streamcomment.font));
                    xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.streamcomment.forecolor));
                    xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.streamcomment.backcolor));
                    xml.WriteEndElement();

                    // Number
                    xml.WriteStartElement("number");
                    xml.WriteAttributeString("font", fontconvert.ConvertToString(settings.number.font));
                    xml.WriteAttributeString("forecolor", colorconvert.ConvertToString(settings.number.forecolor));
                    xml.WriteAttributeString("backcolor", colorconvert.ConvertToString(settings.number.backcolor));
                    xml.WriteEndElement();

                    xml.WriteEndElement();

                    // ================
                    xml.WriteEndElement();
                    xml.WriteEndDocument();
                    // End of scintilla
                }*/
                xml.Close();

                tabs.UpdateTabs();
            }
            catch (Exception ex) { mainform.CaughtException(ex); }
        }
    }
}
